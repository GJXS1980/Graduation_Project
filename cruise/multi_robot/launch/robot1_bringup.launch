<!-- xml -->
<launch>

  <arg name="robot_ns"             default="robot1"/>  <!-- create, roomba -->

    <!-- Turtlebot -->
    <group ns="$(arg robot_ns)">
    <arg name="base"             default="$(env TURTLEBOT_BASE)"/>  <!-- create, roomba -->
    <arg name="battery"          default="$(env TURTLEBOT_BATTERY)"/>  <!-- /proc/acpi/battery/BAT0 in 2.6 or earlier kernels-->
    <arg name="stacks"           default="$(env TURTLEBOT_STACKS)"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor"        default="$(env TURTLEBOT_3D_SENSOR)"/>  <!-- kinect, asus_xtion_pro -->
    <arg name="simulation"       default="$(env TURTLEBOT_SIMULATION)"/>
    <arg name="serialport"       default="$(env TURTLEBOT_SERIAL_PORT)"/> <!-- /dev/ttyUSB0, /dev/ttyS0 -->
    <arg name="robot_name"       default="$(env TURTLEBOT_NAME)"/>
    <arg name="robot_type"       default="$(env TURTLEBOT_TYPE)"/> 

    <param name="/use_sim_time" value="$(arg simulation)"/>
    <param name="tf_prefix" type="string" value="$(arg robot_ns)"/>
    
    <!--
      Collection of robot-centric definitions and nodes for the turtlebot. 
    -->
    <!-- important generally, but specifically utilised by the current app manager -->  
    <include file="$(find turtlebot_bringup)/launch/includes/description.launch.xml">
      <arg name="base" value="$(arg base)" />
      <arg name="stacks" value="$(arg stacks)" />
      <arg name="3d_sensor" value="$(arg 3d_sensor)" />
    </include>
  
    <param name="robot/name" value="$(optenv ROBOT turtlebot)"/>
    <param name="robot/type" value="turtlebot"/>

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="tf_prefix" type="string" value="$(arg robot_ns)"/>
      <param name="publish_frequency" type="double" value="5.0" />
    </node>
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
      <rosparam command="load" file="$(find turtlebot_bringup)/param/$(arg base)/diagnostics.yaml" />
    </node>
      
      
    <!--
    Kobuki's implementation of turtlebot's mobile base.
    -->
    <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager">

    </node>
    
    <node pkg="nodelet" type="nodelet" name="mobile_base" args="load kobuki_node/KobukiNodelet mobile_base_nodelet_manager">      
      <rosparam file="$(find kobuki_node)/param/base.yaml" command="load"/>      
      <param name="odom_frame" type="string"  value="/$(arg robot_ns)/odom"/>
      <param name="base_frame" type="string"  value="/$(arg robot_ns)/base_footprint"/>
      <param name="device_port" value="$(arg serialport)" />
   
      <remap from="mobile_base/odom" to="/$(arg robot_ns)/odom"/>
      
      <!-- Don't do this - force applications to use a velocity mux for redirection  
	<remap from="mobile_base/commands/velocity" to="cmd_vel"/> 
      -->
      <remap from="mobile_base/enable" to="enable"/>
      <remap from="mobile_base/disable" to="disable"/>
      <remap from="mobile_base/joint_states" to="/$(arg robot_ns)/joint_states"/>
    </node>

    <!-- velocity commands multiplexer -->
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
     
      <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
      <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
    </node>
    
    <!-- bumper/cliff to pointcloud -->

    <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

    <include file="$(find turtlebot_bringup)/launch/includes/netbook.launch.xml">
      <arg name="battery" value="$(arg battery)" />
    </include>

    <!-- ###################################
      3D sensors 
    ############################################# -->

    <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
    <arg name="camera"      default="camera"/>
    <arg name="publish_tf"  default="false"/>

    <!-- Factory-calibrated depth registration -->
    <arg name="depth_registration"              default="true"/>
    <arg     if="$(arg depth_registration)" name="depth" value="depth_registered" />
    <arg unless="$(arg depth_registration)" name="depth" value="depth" />

    <!-- Processing Modules -->
    <arg name="rgb_processing"                  default="true"/>
    <arg name="ir_processing"                   default="true"/>
    <arg name="depth_processing"                default="true"/>
    <arg name="depth_registered_processing"     default="true"/>
    <arg name="disparity_processing"            default="true"/>
    <arg name="disparity_registered_processing" default="true"/>
    <arg name="scan_processing"                 default="true"/>

    <!-- Worker threads for the nodelet manager -->
    <arg name="num_worker_threads" default="4" />

    <!-- Laserscan topic -->
    <arg name="scan_topic" default="scan"/>

    <include file="$(find freenect_launch)/launch/freenect.launch">
      <arg name="camera"                          value="$(arg camera)"/>
      <arg name="publish_tf"                      value="$(arg publish_tf)"/>
      <arg name="depth_registration"              value="$(arg depth_registration)"/>
      <arg name="num_worker_threads"              value="$(arg num_worker_threads)" />

      <!-- Processing Modules -->
      <arg name="rgb_processing"                  value="$(arg rgb_processing)"/>
      <arg name="ir_processing"                   value="$(arg ir_processing)"/>
      <arg name="depth_processing"                value="$(arg depth_processing)"/>
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)"/>
      <arg name="disparity_processing"            value="$(arg disparity_processing)"/>
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)"/>
    </include>

    <!--                        Laserscan 
      This uses lazy subscribing, so will not activate until scan is requested.
    -->
    <group if="$(arg scan_processing)">
      <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg camera)/$(arg camera)_nodelet_manager">
	<!-- Pixel rows to use to generate the laserscan. For each column, the scan will
	    return the minimum value for those pixels centered vertically in the image. -->
	<param name="scan_height" value="10"/>
	<param name="output_frame_id" value="$(arg robot_ns)/$(arg camera)_depth_frame"/>
	<param name="range_min" value="0.45"/>
	<remap from="image" to="$(arg camera)/$(arg depth)/image_raw"/>
	<remap from="scan" to="$(arg scan_topic)"/>

	<!-- Somehow topics here get prefixed by "$(arg camera)" when not inside an app namespace,
	    so in this case "$(arg scan_topic)" must provide an absolute topic name (issue #88).
	    Probably is a bug in the nodelet manager: https://github.com/ros/nodelet_core/issues/7 -->
	<remap from="$(arg camera)/image" to="$(arg camera)/$(arg depth)/image_raw"/>
	<remap from="$(arg camera)/scan" to="$(arg scan_topic)"/>
      </node>
    </group>
  </group>

</launch>
